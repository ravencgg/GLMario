
Convenience stuff:
    Make a struct that does params for DrawLine and DrawRect so there doesn't have to be 15 paramaters to the functions.


TOREDO:
    Renderer
        -> convert to individual render groups? draw to framebuffers?
        -> file static stuff? probably not

        For drawing rects/lines, maybe hand out vbos within a handle structure? 
            -> or maybe just switch it to the system where you buffer every line to be drawn for the frame and do 
                them all at once.  This would be the best in the end even if the downsides of extra memcopies are present

Window
    Convert the viewport dimensions when resizing the window? Currently locked at 16:9

Collision:
    Support rotated rectangles, fill the aabb inside the StaticCollider struct

    If you copy collider data from the quadtree instead of just the pointers then you could SIMD the raycasting

Console/Rendering:
    Multi color text on a per letter basis 
        -> should the "start" variable be taken out of the StringTextColor struct?
           it is implied if there is always a StringTextColor object during drawing
           which there will be because if one is not supplied, then a default one is used.
     
     World space text rendering 

     Remove console from the debug profiling
        
Optimization:
    Cull draws out of viewport

    Broad phase collision detection
    
    Split the entity array into groups for faster searching

    Make a DebugMemoryArena for console string / debug graph memory storage
        -> convert all the debug calls to macros so they can be compiled out of non-profiling builds


To figure out:

    New project structure
        Unity build, with platform_win32.cpp included behind header guards.

    Should there be "Scene" types? 
        -> cutsene, game, menu
        -> each could have their own memory and entities, multiple could be active at a time

    Global Unique IDs? or keep ids unique within their own system only?
